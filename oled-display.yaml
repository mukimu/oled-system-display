esphome:
  name: xxxxx #yourname
  friendly_name: xxxxx #yourname

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "" # your API key

ota:
  password: "" # your password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tommy Fallback Hotspot"
    password: "" #your password

captive_portal:

time:
  - platform: sntp
    id: my_time
    timezone: "<+08>-8" #Singapore

sensor:
  - platform: homeassistant
    id: dlspeed
    entity_id: sensor.rt_ax56_xd4_wan_download_speed #from Asus Router sensor
  - platform: homeassistant
    id: ulspeed
    entity_id: sensor.rt_ax56_xd4_wan_upload_speed
  - platform: homeassistant
    id: temperature
    entity_id: sensor.openweathermap_temperature
  - platform: homeassistant
    id: humidity
    entity_id: sensor.openweathermap_humidity
  - platform: homeassistant
    id: cpu
    entity_id: sensor.truenas_system_cpu_usage
  - platform: homeassistant
    id: bitstemp
    entity_id: sensor.truenas_system_temperature
  - platform: rotary_encoder
    max_value: 10
    min_value: 0
    pin_a:
      number: GPIO18
      inverted: True
      mode:
        input: True
        pullup: True
    pin_b:
      number: GPIO19
      mode:
        input: True
        pullup: True
    name: "Rotary Encoder"
    on_clockwise: 
      then:
        - display.page.show_next: ext_display
        - component.update: ext_display
    on_anticlockwise: 
      then:
        - display.page.show_previous: ext_display
        - component.update: ext_display

text_sensor:
  - platform: homeassistant
    id: weather
    entity_id: sensor.openweathermap_weather

graph:
  - id: cpu_graph
    duration: 25min
    width: 128
    height: 64
    min_value: 0
    max_value: 100
    x_grid: 5min
    y_grid: 20
    traces:
      - sensor: cpu
        line_type: SOLID
        line_thickness: 2
      - sensor: bitstemp
        line_type: DASHED
        line_thickness: 2


esp32_touch:
  setup_mode: False

binary_sensor:
  - platform: esp32_touch
    name: "Left Touch Sensor"
    pin: GPIO13
    threshold: 1000
    on_press:
      then:
        deep_sleep.enter:
          id: deep_sleep_1
  - platform: esp32_touch
    name: "Right Touch Sensor"
    pin: GPIO15
    threshold: 1000
    on_press:
      then:
        - display.page.show_next: ext_display
        - component.update: ext_display

deep_sleep: #not mandatory, but if you want to sleep
  id: deep_sleep_1
  wakeup_pin:
    number: GPIO0
    inverted: True

output: 
  - id: onboard_led
    platform: gpio
    pin: GPIO2

light:
  - platform: binary
    name: "Onboard LED"
    output: onboard_led

interval:
  - interval: 1s
    then: #status_led probably better for this
      if:
        condition:
          wifi.connected:
        then:
          if:
            condition:
              api.connected:
            then:
                - output.turn_on: onboard_led
            else:
            - output.turn_on: onboard_led
            - delay: 250ms
            - output.turn_off: onboard_led
            - delay: 250ms
            - output.turn_on: onboard_led
            - delay: 250ms
            - output.turn_off: onboard_led
            - delay: 250ms
        else:
          - output.turn_off: onboard_led 
  - interval: 15s
    then:
      - display.page.show_next: ext_display
      - component.update: ext_display

i2c:
  sda: GPIO21
  scl: GPIO22
  frequency: 800kHz

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 10
  - file: "gfonts://Rubik Mono One"
    id: rubik
    size: 26
  - file: "gfonts://Rubik Mono One"
    id: rubik15
    size: 15
  - file: "gfonts://Rubik Mono One"
    id: rubik13
    size: 13

display:
  - platform: ssd1306_i2c
    id: ext_display
    # model: "SH1106 128x32"
    model: SH1106_128X64
    flip_x: True
    flip_y: True
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(rubik15), TextAlign::TOP_LEFT, "Down: %.1f", id(dlspeed).state);
          it.printf(0, 23, id(rubik15), TextAlign::CENTER_LEFT, "Up:   %.1f", id(ulspeed).state);
          it.printf(it.get_width() - 1, it.get_height(), id(roboto), TextAlign::BASELINE_RIGHT, "1");
      - id: page2
        lambda: |-
          it.printf(0,0, id(rubik13), TextAlign::TOP_LEFT, "Temp: %.0f", id(temperature).state);
          it.printf(0, 20, id(rubik13), TextAlign::CENTER_LEFT, "Hum:  %.0f%%", id(humidity).state);
          it.printf(it.get_width() / 2, it.get_height(), id(roboto), TextAlign::BASELINE_CENTER, "%s", id(weather).state.c_str()); 
          it.printf(it.get_width() - 1, it.get_height(), id(roboto), TextAlign::BASELINE_RIGHT, "2");
      - id: page3
        lambda: |-
          it.strftime(it.get_width() / 2, it.get_height() / 2, id(rubik), TextAlign::CENTER, "%H:%M", id(my_time).now());
      - id: page4
        lambda: |-
          it.printf(it.get_width() / 2, 0, id(rubik15), TextAlign::TOP_CENTER, "CPU: %.0f%%", id(cpu).state);
          it.printf(it.get_width() / 2, it.get_height(), id(rubik15), TextAlign::BOTTOM_CENTER, "Temp: %.0f", id(bitstemp).state);
          it.printf(it.get_width() - 1, it.get_height(), id(roboto), TextAlign::BASELINE_RIGHT, "4");
      - id: page5
        lambda: |-
          it.graph(0, 0, id(cpu_graph));
